#pragma once
#include <tuple>
#include <vector>
#include <iostream>
#include <string>

#include "Flor.h"
#include "Vampiro.h"

using namespace std;

struct FlorEnJuego
{
	FlorEnJuego(){};
	FlorEnJuego(Flor f, Posicion p, Vida v)
	{
		flor = f;
		pos = p;
		vida = v;
	}

	Flor flor;
	Posicion pos;
	Vida vida;
};

struct VampiroEnJuego
{
	VampiroEnJuego(Vampiro v, Posicion p, Vida vd)
	{
		vampiro = v;
		pos = p;
		vida = vd;
	}
	Vampiro vampiro;
	Posicion pos;
	Vida vida;
};

struct VampiroEnEspera
{
	Vampiro vampiro;
	int fila;
	int turno;

	VampiroEnEspera(Vampiro v, int f, int t)
	{
		vampiro = v;
		fila = f;
		turno = t;
	}

};

class Nivel
{
private:
	vector<VampiroEnEspera> ordenarPorTurnoYFila(vector<VampiroEnEspera> spawning);
	vector<VampiroEnEspera> ordenarSpawning(vector<VampiroEnEspera> spawning);
	bool tieneTurnoMinimo(VampiroEnEspera v1, vector<VampiroEnEspera> spawning);
	vector<VampiroEnEspera> eliminarSpawning(vector<VampiroEnEspera> lista, VampiroEnEspera vampiro);
	bool igualesVampiros(VampiroEnEspera v1, VampiroEnEspera v2);
	int cantidadFloresConHabilidad(Habilidad habilidad);
	bool florAtaca (FlorEnJuego f);
	int _ancho;
	int _alto;
	int _turno;
	int _soles;

	vector<FlorEnJuego> _flores;
	vector<VampiroEnJuego> _vampiros;
	vector<VampiroEnEspera> _spawning;
	
public:
	Nivel();
	Nivel(int ancho, int alto, int soles, vector<VampiroEnEspera>& spawninglist);
	int anchoN();
	int altoN();
	int turnoN();
	int solesN();
	vector<FlorEnJuego>& floresN();
	vector<VampiroEnJuego>& vampirosN();
	vector<VampiroEnEspera>& spawningN();
	void agregarFlor(Flor f, Posicion p);
	void pasarTurno();
	bool terminado();
	bool obsesivoCompulsivo();

	void Mostrar(ostream& os);
	void Guardar(ostream& os);
	void Cargar(istream& is);


};
