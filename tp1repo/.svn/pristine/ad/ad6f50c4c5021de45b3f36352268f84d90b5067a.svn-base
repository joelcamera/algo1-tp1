#include "Juego.h"
#include "Vampiro.h"
#include <iostream>

using namespace std;

int main(){

  /*cout << " Trabajo practico Flores vs Vampiros" << endl;
  
  vector<Habilidad> hab;
  hab.push_back(Atacar);
  
  vector<Habilidad> hab2;
  hab2.push_back(Atacar);
  hab2.push_back(Generar);
  
  vector<Habilidad> hab3;
  hab3.push_back(Explotar);
  hab3.push_back(Generar);
  
  Flor f(25,0,hab3);
  
  cout << f.vidaF() << ' ' << f.cuantoPegaF() << endl;
  
  Vampiro v(Caminante,50,50);
  
  cout << v.vidaV() << ' ' << v.cuantoPegaV() << endl;
  
  vector<VampiroEnEspera> spawn;
  spawn.push_back(VampiroEnEspera(v,2,2));
  
  Nivel n(5,5,100,spawn);
  
  cout << n.solesN() << endl;
  
  n.agregarFlor(f, Posicion(2,2));
  
  cout << n.solesN() << endl;
  
  n.pasarTurno();
  
  cout << n.solesN() << endl;
  
  cout << n.terminado() << ' ' << n.obsesivoCompulsivo() << endl;
  
  
  vector<Flor> fs;
  fs.push_back(f);
  
  vector<Vampiro> vs;
  vs.push_back(v);
  
  Juego j(fs,vs);
  
  j.agregarNivel(n);
  
  cout << j.muyDeExactas() << endl;
*/
	
/* TEST CREACION DE NIVEL + GUARDAR/MOSTRAR -NO BORRAR-
	
	cout << "Comenzando ejecucion..." << endl;
	Vida vida = 100;
	ClaseVampiro cv = Caminante;
	VampiroEnEspera v1 = VampiroEnEspera(Vampiro(cv, vida, 10), 1, 1);
	VampiroEnEspera v2 = VampiroEnEspera(Vampiro(cv, vida, 10), 1, 2);
	VampiroEnEspera v3 = VampiroEnEspera(Vampiro(cv, vida, 10), 1, 3);
	VampiroEnEspera v4 = VampiroEnEspera(Vampiro(cv, vida, 10), 1, 4);
	VampiroEnEspera v5 = VampiroEnEspera(Vampiro(cv, vida, 10), 1, 5);
	VampiroEnEspera v6 = VampiroEnEspera(Vampiro(cv, vida, 10), 3, 5);
	VampiroEnEspera v7 = VampiroEnEspera(Vampiro(cv, vida, 10), 2, 5);
	std::vector<VampiroEnEspera> spawning = std::vector<VampiroEnEspera>();
	spawning.push_back(v2);
	spawning.push_back(v3);
	spawning.push_back(v1);
	spawning.push_back(v5);
	spawning.push_back(v4);
	spawning.push_back(v6);
	spawning.push_back(v7);
	cout << "Todo creado, se crea nivel" << endl;
	Nivel nivel = Nivel(10, 10, 50, spawning);
*/

 /* ofstream osn;

  nivel.Guardar(osn);
  nivel.Mostrar(osn); */
  


  /* TEST DE GUARDAR 
  std::vector<Habilidad> h1;
  h1.push_back(Generar);
  h1.push_back(Explotar);
  h1.push_back(Explotar);
  h1.push_back(Explotar);
  h1.push_back(Explotar);
  h1.push_back(Atacar);

  Flor f1(10,10,h1);

  std::vector<Habilidad> h2;
  h2.push_back(Atacar);
  h2.push_back(Atacar);
  h2.push_back(Atacar);
  h2.push_back(Atacar);
  h2.push_back(Generar);
  h2.push_back(Generar);
  h2.push_back(Generar);
  h2.push_back(Generar);

  Flor f2(10,10,h2);

  Flor f3,f4,f5,f6;
  f3 = f1;
  f4=f1;
  f5 = f2;
  f6 = f2;
  ofstream osf("f.txt");

  f.Guardar(osf);
  //f.Mostrar(osf);
  osf.close();

  std::vector<Flor> flores;
  flores.push_back(f1);
  flores.push_back(f2);

  Vampiro vamp1(Desviado,10,10);
  Vampiro vamp2(Caminante,10,10);
  Vampiro vamp3(Desviado,10,10);
  Vampiro vamp4(Caminante,10,50);

  std::vector<Vampiro> vamps;
  vamps.push_back(vamp1);
  vamps.push_back(vamp2);
  vamps.push_back(vamp3);
  vamps.push_back(vamp4);

  ofstream osV("v.txt");

  vamp.Guardar(osV);
  osV.close();*/


/* TEST AGREGARFLOR, OBSESIVOCOMPULSIVO

	Flor a1=Flor(1, 1, {Atacar, Generar});
	Flor a2=Flor(1, 1, {Atacar, Explotar});
	Flor n1=Flor(1, 1, {Generar});
	Flor n2=Flor(1, 1, {Explotar});
	nivel.agregarFlor(a1, Posicion(2,3));
	nivel.agregarFlor(n2, Posicion(3,4));
	nivel.agregarFlor(n1, Posicion(1,3));
	nivel.agregarFlor(a2, Posicion(3,2));
	cout << nivel.obsesivoCompulsivo() << endl;
*/
}

