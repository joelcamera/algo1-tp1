#include "Juego.h"
#include "Vampiro.h"
#include "Nivel.h"
#include <iostream>
#include <fstream>


using namespace std;

int main(){

  /*cout << " Trabajo practico Flores vs Vampiros" << endl;
  
  vector<Habilidad> hab;
  hab.push_back(Atacar);
  
  vector<Habilidad> hab2;
  hab2.push_back(Atacar);
  hab2.push_back(Generar);
  
  vector<Habilidad> hab3;
  hab3.push_back(Explotar);
  hab3.push_back(Generar);
  
  Flor f(25,0,hab3);
  
  cout << f.vidaF() << ' ' << f.cuantoPegaF() << endl;
  
  Vampiro v(Caminante,50,50);
  
  cout << v.vidaV() << ' ' << v.cuantoPegaV() << endl;
  
  vector<VampiroEnEspera> spawn;
  spawn.push_back(VampiroEnEspera(v,2,2));
  
  Nivel n(5,5,100,spawn);
  
  cout << n.solesN() << endl;
  
  n.agregarFlor(f, Posicion(2,2));
  
  cout << n.solesN() << endl;
  
  n.pasarTurno();
  
  cout << n.solesN() << endl;
  
  cout << n.terminado() << ' ' << n.obsesivoCompulsivo() << endl;
  
  
  vector<Flor> fs;
  fs.push_back(f);
  
  vector<Vampiro> vs;
  vs.push_back(v);
  
  Juego j(fs,vs);
  
  j.agregarNivel(n);
  
  cout << j.muyDeExactas() << endl;
*/
	
/* TEST CREACION DE NIVEL + GUARDAR/MOSTRAR -NO BORRAR-
	
	cout << "Comenzando ejecucion..." << endl;
	Vida vida = 100;
	ClaseVampiro cv = Caminante;
	VampiroEnEspera v1 = VampiroEnEspera(Vampiro(cv, vida, 10), 1, 1);
	VampiroEnEspera v2 = VampiroEnEspera(Vampiro(cv, vida, 10), 1, 2);
	VampiroEnEspera v3 = VampiroEnEspera(Vampiro(cv, vida, 10), 1, 3);
	VampiroEnEspera v4 = VampiroEnEspera(Vampiro(cv, vida, 10), 1, 4);
	VampiroEnEspera v5 = VampiroEnEspera(Vampiro(cv, vida, 10), 1, 5);
	VampiroEnEspera v6 = VampiroEnEspera(Vampiro(cv, vida, 10), 3, 5);
	VampiroEnEspera v7 = VampiroEnEspera(Vampiro(cv, vida, 10), 2, 5);
	std::vector<VampiroEnEspera> spawning = std::vector<VampiroEnEspera>();
	spawning.push_back(v2);
	spawning.push_back(v3);
	spawning.push_back(v1);
	spawning.push_back(v5);
	spawning.push_back(v4);
	spawning.push_back(v6);
	spawning.push_back(v7);
	cout << "Todo creado, se crea nivel" << endl;
	Nivel nivel = Nivel(10, 10, 50, spawning);
*/

 /* ofstream osn;

  nivel.Guardar(osn);
  nivel.Mostrar(osn); */
  


  /* TEST DE GUARDAR 
  std::vector<Habilidad> h1;
  h1.push_back(Generar);
  h1.push_back(Explotar);
  h1.push_back(Explotar);
  h1.push_back(Explotar);
  h1.push_back(Explotar);
  h1.push_back(Atacar);

  Flor f1(10,10,h1);

  std::vector<Habilidad> h2;
  h2.push_back(Atacar);
  h2.push_back(Atacar);
  h2.push_back(Atacar);
  h2.push_back(Atacar);
  h2.push_back(Generar);
  h2.push_back(Generar);
  h2.push_back(Generar);
  h2.push_back(Generar);

  Flor f2(10,10,h2);

  Flor f3,f4,f5,f6;
  f3 = f1;
  f4=f1;
  f5 = f2;
  f6 = f2;
  ofstream osf("f.txt");

  f.Guardar(osf);
  //f.Mostrar(osf);
  osf.close();

  std::vector<Flor> flores;
  flores.push_back(f1);
  flores.push_back(f2);

  Vampiro vamp1(Desviado,10,10);
  Vampiro vamp2(Caminante,10,10);
  Vampiro vamp3(Desviado,10,10);
  Vampiro vamp4(Caminante,10,50);

  std::vector<Vampiro> vamps;
  vamps.push_back(vamp1);
  vamps.push_back(vamp2);
  vamps.push_back(vamp3);
  vamps.push_back(vamp4);

  ofstream osV("v.txt");

  vamp.Guardar(osV);
  osV.close();
  */


 /*TEST AGREGARFLOR, OBSESIVOCOMPULSIVO, PASAR TURNO 

  Vida vida = 100;
  ClaseVampiro cv = Caminante;
  VampiroEnEspera v1 = VampiroEnEspera(Vampiro(cv, vida, 10), 1, 1);
  VampiroEnEspera v2 = VampiroEnEspera(Vampiro(cv, vida, 10), 1, 2);
  VampiroEnEspera v3 = VampiroEnEspera(Vampiro(cv, vida, 10), 1, 3);
  VampiroEnEspera v4 = VampiroEnEspera(Vampiro(cv, vida, 10), 1, 4);
  VampiroEnEspera v5 = VampiroEnEspera(Vampiro(cv, vida, 10), 1, 5);
  VampiroEnEspera v6 = VampiroEnEspera(Vampiro(cv, vida, 10), 3, 5);
  VampiroEnEspera v7 = VampiroEnEspera(Vampiro(cv, vida, 10), 2, 5);
  std::vector<VampiroEnEspera> spawning = std::vector<VampiroEnEspera>();
  spawning.push_back(v2);
  spawning.push_back(v3);
  spawning.push_back(v1);
  spawning.push_back(v5);
  spawning.push_back(v4);
  spawning.push_back(v6);
  spawning.push_back(v7);
  cout << "Todo creado, se crea nivel" << endl;
  Nivel nivel = Nivel(10, 10, 50, spawning);

	Flor a1=Flor(1, 1, {Atacar, Generar});
	Flor a2=Flor(1, 1, {Atacar, Explotar});
	Flor n1=Flor(1, 1, {Atacar});
	Flor n2=Flor(1, 1, {Atacar});
	nivel.agregarFlor(a1, Posicion(1,1));
  nivel.agregarFlor(n2, Posicion(1,3));
  nivel.agregarFlor(n1, Posicion(1,2));
	nivel.agregarFlor(a2, Posicion(1,4));
  nivel.agregarFlor(a2, Posicion(3,4));
  nivel.agregarFlor(a2, Posicion(2,4));
  nivel.agregarFlor(a2, Posicion(3,3));
  nivel.agregarFlor(a2, Posicion(2,2));
  nivel.agregarFlor(a1, Posicion(3,1));


  int i = 0;

	nivel.pasarTurno();
  cout << "lista de flores: " << nivel.floresN().size() << endl;
  while(i < nivel.floresN().size()){
    cout << "vida de la flor: " << nivel.floresN().at(i).vida << endl;
    i++;
  }
  cout << "lista vampiros: " << nivel.vampirosN().size() << endl;
  cout << "cantidad de soles: " << nivel.solesN() << endl << endl;
  cout << "por donde anda mi vampiro: " << nivel.vampirosN().at(0).pos.fila << endl;

  i = 0;
  nivel.pasarTurno();
  cout << "lista de flores: " << nivel.floresN().size() << endl;
  while(i < nivel.floresN().size()){
    cout << "vida de la flor: " << nivel.floresN().at(i).vida << endl;
    i++;
  }
  cout << "lista vampiros: " << nivel.vampirosN().size() << endl;
  cout << "cantidad de soles: " << nivel.solesN() << endl << endl;
  cout << "por donde anda mi vampiro: " << nivel.vampirosN().at(0).pos.fila << endl;
 
  i = 0;
  nivel.pasarTurno();
  cout << "lista de flores: " << nivel.floresN().size() << endl;
  while(i < nivel.floresN().size()){
    cout << "vida de la flor: " << nivel.floresN().at(i).vida << endl;
    i++;
  }
  cout << "lista vampiros: " << nivel.vampirosN().size() << endl;
  cout << "cantidad de soles: " << nivel.solesN() << endl << endl;
  cout << "por donde anda mi vampiro: " << nivel.vampirosN().at(0).pos.fila << endl;
  
  i = 0;
  nivel.pasarTurno();
  cout << "lista de flores: " << nivel.floresN().size() << endl;
  while(i < nivel.floresN().size()){
    cout << "vida de la flor: " << nivel.floresN().at(i).vida << endl;
    i++;
  }
  cout << "lista vampiros: " << nivel.vampirosN().size() << endl;
  cout << "cantidad de soles: " << nivel.solesN() << endl << endl;
  cout << "por donde anda mi vampiro: " << nivel.vampirosN().at(0).pos.fila << endl;

  i = 0;
  nivel.pasarTurno();
  cout << "lista de flores: " << nivel.floresN().size() << endl;
  while(i < nivel.floresN().size()){
    cout << "vida de la flor: " << nivel.floresN().at(i).vida << endl;
    i++;
  }
  cout << "lista vampiros: " << nivel.vampirosN().size() << endl;
  cout << "cantidad de soles: " << nivel.solesN() << endl << endl;
  cout << "por donde anda mi vampiro: " << nivel.vampirosN().at(0).pos.fila << endl;


  nivel.pasarTurno();
  nivel.pasarTurno();
  nivel.pasarTurno();
  nivel.pasarTurno();
  nivel.pasarTurno();
  nivel.pasarTurno();
  nivel.pasarTurno();
  nivel.pasarTurno();
  nivel.pasarTurno();
  nivel.pasarTurno();
  nivel.pasarTurno();
  nivel.pasarTurno();
  nivel.pasarTurno();
  nivel.pasarTurno();
  nivel.pasarTurno();
  nivel.pasarTurno();
  nivel.pasarTurno();
  nivel.pasarTurno();
  nivel.pasarTurno();
  nivel.pasarTurno();
  nivel.pasarTurno();
  nivel.pasarTurno();
  nivel.pasarTurno();
  nivel.pasarTurno();
  nivel.pasarTurno();
  nivel.pasarTurno();
  nivel.pasarTurno();  

  cout << "lista de flores: " << nivel.floresN().size() << endl;

  while(i < nivel.floresN().size()){
    cout << "vida de la flor: " << nivel.floresN().at(i).vida << endl;
    i++;
  }
  cout << "lista vampiros: " << nivel.vampirosN().size() << endl;
  cout << "cantidad de soles: " << nivel.solesN() << endl << endl;
  cout << "por donde anda mi vampiro: " << nivel.vampirosN().at(0).pos.fila << endl;*/

/* TEST MOSTRAR

  std::vector<Habilidad> h1;
  h1.push_back(Atacar);

  std::vector<Habilidad> h2;
  h2.push_back(Generar);
  h2.push_back(Explotar);

  std::vector<Habilidad> h3;
  h3.push_back(Atacar);
  h3.push_back(Generar);
  h3.push_back(Explotar);

  Flor f1(10,10,h1);
  Flor f2(10,10,h2);
  Flor f3(10,10,h3);

  //f1.Mostrar(cout);
  //f2.Mostrar(cout);
  //f3.Mostrar(cout);

  Vampiro v1(Desviado,10,10);
  Vampiro v2(Caminante,50,50);
  Vampiro v3(Desviado,100,90);
  Vampiro v4(Desviado,33,12);
  Vampiro v5(Caminante,45,93);
  Vampiro v6(Desviado,34,66);
  Vampiro v7(Caminante,11,74);


  //v1.Mostrar(cout);
  //v2.Mostrar(cout);
  //v3.Mostrar(cout);

  VampiroEnEspera vamp1(v1,10,10);
  VampiroEnEspera vamp2(v2,30,30);
  VampiroEnEspera vamp3(v3,35,23);

  std::vector<VampiroEnEspera> spawninglist;

  spawninglist.push_back(vamp1);
  spawninglist.push_back(vamp2);
  spawninglist.push_back(vamp3);

  Nivel n1(50,50,10,spawninglist);

  //n1.Mostrar(cout);

  std::vector<Flor> vectorFlor;
  vectorFlor.push_back(f1);
  vectorFlor.push_back(f2);
  vectorFlor.push_back(f3);

  std::vector<Vampiro> vectorVamp;
  vectorVamp.push_back(v1);
  vectorVamp.push_back(v2);
  vectorVamp.push_back(v3);
  vectorVamp.push_back(v4);

  Juego j(vectorFlor,vectorVamp);

  //j.Mostrar(cout);
  */

  /*  TEST DE CARGAR 
  
  Vampiro vamp1;
  Flor f;
  Nivel n;
  Juego game;

  ifstream is("cargarJuego");

  if(is.is_open()){
    game.Cargar(is);
    is.close();
  }

  cout << "Cree juego" << endl;
  cout << "Cantidad de flores del juego: " << game.floresJ().size() << endl;
  cout << "Cantidad de vampiros del juego: " << game.vampirosJ().size() << endl;
  cout << "cantidad de niveles del juego: " << game.nivelesJ().size() << endl;

  cout << "ancho del nivel: " << n.anchoN() << endl;
  cout << "alto del nivel: " << n.altoN() << endl;
  cout << "turno del nivel: " << n.turnoN() << endl;
  cout << "soles del nivel: " << n.solesN() << endl;
  cout << "longitud lista flores: " << n.floresN().size() << endl;
  cout << "longitud lista vampiros: " << n.vampirosN().size() << endl;
  cout << "longitud lista de spawning: " << n.spawningN().size() << endl;
  
  cout << "Cree Flor" << endl;
  cout << "vida de la flor: " << f.vidaF() << endl;
  cout << "cuanto pega la flor: " << f.cuantoPegaF() << endl;
  cout << "habilidades de la flor: ";

  int i = 0;

  while(i < f.habilidadesF().size()){
    cout << f.habilidadesF().at(i) << " ";
    i++;
  }
  cout << endl;

  cout << "Cree vampiro" << endl;
  cout << "vida del vampiro: " << vamp1.vidaV() << endl;
  cout << "cuanto pega el vampiro: " << vamp1.cuantoPegaV() << endl;
  cout << "clase del vampiro: " << vamp1.claseV() << endl;*/
  

  /* TEST DE agregarNivel 
  Juego juego = Juego();
  std::vector<VampiroEnEspera> vampiros = std::vector<VampiroEnEspera>();
  ClaseVampiro cv = Caminante;
  Vampiro vampiro = Vampiro(cv, 60, 12);
  VampiroEnEspera vampiroEnEspera1 = VampiroEnEspera(vampiro, 1, 2);
  VampiroEnEspera vampiroEnEspera2 = VampiroEnEspera(vampiro, 1, 2);
  vampiros.push_back(vampiroEnEspera1);
  Nivel nivel1 = Nivel(10, 10, 10, vampiros);
  Nivel nivel2 = Nivel(20, 20, 20, vampiros);
  Nivel nivel3 = Nivel(30, 30, 30, vampiros);
  Nivel nivel4 = Nivel(40, 40, 40, vampiros);
  juego.agregarNivel(nivel1, 0);
  juego.agregarNivel(nivel2, 1);
  juego.agregarNivel(nivel3, 2);
  juego.agregarNivel(nivel4, 3);
  
  int i = 0;
  while(i < juego.nivelesJ().size()){
	  Nivel nivel = juego.nivelesJ().at(i);
	  cout << "Mostrando flor..." << i << endl;
	  nivel.Mostrar(cout);
	  i++;
  }
   */
  
  /* TEST estoSaleFacil
  Juego juego = Juego();
  std::vector<VampiroEnEspera> vampiros = std::vector<VampiroEnEspera>();
  ClaseVampiro cv = Caminante;
  Vampiro vampiro = Vampiro(cv, 60, 12);
  VampiroEnEspera vampiroEnEspera1 = VampiroEnEspera(vampiro, 1, 2);
  vampiros.push_back(vampiroEnEspera1);
  Nivel nivel1 = Nivel(10, 10, 10, vampiros);
  Nivel nivel2 = Nivel(20, 20, 20, vampiros);
  Nivel nivel3 = Nivel(30, 30, 30, vampiros);
  Nivel nivel4 = Nivel(40, 40, 40, vampiros);
  juego.agregarNivel(nivel1, 0);
  juego.agregarNivel(nivel4, 1);
  juego.agregarNivel(nivel3, 2);
  juego.agregarNivel(nivel2, 3);
  
  std::vector<Nivel> nivelesFaciles = juego.estosSaleFacil();
  int j = 0;
  while(j < nivelesFaciles.size()){
	  nivelesFaciles.at(j).Mostrar(cout);
	  j++;
  }
  */
  

  /* TEST altoCheat
  Juego juego = Juego();
  std::vector<VampiroEnEspera> vampiros = std::vector<VampiroEnEspera>();
  ClaseVampiro cv = Caminante;
  Vampiro vampiro1 = Vampiro(cv, 60, 12);
  Vampiro vampiro2 = Vampiro(cv, 60, 12);
  VampiroEnEspera vampiroEnEspera1 = VampiroEnEspera(vampiro1, 1, 2);
  VampiroEnEspera vampiroEnEspera2 = VampiroEnEspera(vampiro2, 1, 2);
  vampiros.push_back(vampiroEnEspera1);
  vampiros.push_back(vampiroEnEspera2);
  Nivel nivel1 = Nivel(10, 10, 10, vampiros);
  Nivel nivel2 = Nivel(20, 20, 20, vampiros);
  Nivel nivel3 = Nivel(30, 30, 30, vampiros);
  Nivel nivel4 = Nivel(40, 40, 40, vampiros);
  nivel3.pasarTurno();
  juego.agregarNivel(nivel1, 0);
  juego.agregarNivel(nivel2, 1);
  juego.agregarNivel(nivel3, 2);
  juego.agregarNivel(nivel4, 3);
  juego.nivelesJ()[2].Mostrar(cout);
  juego.altoCheat(2);
  juego.nivelesJ()[2].Mostrar(cout); */

  /* TEST altocheat v.2
  Juego juego = Juego();
  ifstream is ("niv.txt");
  Nivel niv= Nivel();
  if (is.is_open()){
	  niv.Cargar(is);
	  niv.Mostrar(cout);
  }
  else cout << "Mal!" << endl;
  juego.agregarNivel(niv, 0);
  //juego.nivelesJ().at(0).pasarTurno();
  juego.Mostrar(cout);
  juego.altoCheat(0);
  juego.Mostrar(cout); */

   /* TEST muyDeExactas 
   
   Juego juego = Juego();
   cout << "Muy de exactas: " << juego.muyDeExactas() << endl;
   */
   
   /* TEST pasarTurno */
   
   std::vector<VampiroEnEspera> vampiros = std::vector<VampiroEnEspera>();
  ClaseVampiro cv = Desviado;
  Vampiro vampiro = Vampiro(cv, 100, 40);
  VampiroEnEspera vampiroEnEspera1 = VampiroEnEspera(vampiro, 3, 1);
  VampiroEnEspera vampiroEnEspera2 = VampiroEnEspera(vampiro, 3, 2);
  VampiroEnEspera vampiroEnEspera3 = VampiroEnEspera(vampiro, 3, 3);
  VampiroEnEspera vampiroEnEspera4 = VampiroEnEspera(vampiro, 3, 4);
  VampiroEnEspera vampiroEnEspera5 = VampiroEnEspera(vampiro, 3, 5);
  VampiroEnEspera vampiroEnEspera6 = VampiroEnEspera(vampiro, 3, 6);
  VampiroEnEspera vampiroEnEspera7 = VampiroEnEspera(vampiro, 3, 7);
  vampiros.push_back(vampiroEnEspera1);
  /*vampiros.push_back(vampiroEnEspera2);
  vampiros.push_back(vampiroEnEspera3);
  vampiros.push_back(vampiroEnEspera4);
  vampiros.push_back(vampiroEnEspera5);
  vampiros.push_back(vampiroEnEspera6);
  vampiros.push_back(vampiroEnEspera7);*/
  Nivel nivel1 = Nivel(10, 10, 10, vampiros);
  Habilidad h1 = Atacar;
  Habilidad h2 = Explotar;
  Habilidad h3 = Generar;
  vector<Habilidad> vh1 = vector<Habilidad>();
  vector<Habilidad> vh2 = vector<Habilidad>();
  vector<Habilidad> vh3 = vector<Habilidad>();
  vh1.push_back(h1);
  vh2.push_back(h2);
  vh3.push_back(h3);
  Flor f1 = Flor(10, 10, vh1);
  Flor f2 = Flor(10, 10, vh2);
  Flor f3 = Flor(10, 10, vh3);
  Posicion p1 = Posicion(3, 8);
  Posicion p2 = Posicion(1, 7);
  nivel1.agregarFlor(f2, p2);
  //nivel1.agregarFlor(f2, p2);
  //cout << endl;
  //cout << "Inicio primer pasarTurno" <<endl;
  nivel1.Mostrar(cout);
  nivel1.pasarTurno();
  nivel1.Mostrar(cout);
  //nivel1.Mostrar(cout);
  //cout << "Fin primer pasarTurno" <<endl;
   //cout << endl;
  //cout << "Inicio segundo pasarTurno" <<endl;
  nivel1.pasarTurno();
  nivel1.Mostrar(cout);
  nivel1.pasarTurno();
  nivel1.Mostrar(cout);
  nivel1.pasarTurno();
  nivel1.Mostrar(cout);
  nivel1.pasarTurno();
  nivel1.Mostrar(cout);
  /*nivel1.pasarTurno();
  nivel1.pasarTurno();
  nivel1.pasarTurno();
  nivel1.pasarTurno();
  nivel1.pasarTurno();
  nivel1.pasarTurno();*/
  //cout << "Fin segundo pasarTurno" <<endl;
  //nivel1.Mostrar(cout);
  /* */

  /* TEST VAMPIRO

  Vampiro vampBien1(Caminante,30,10);
  Vampiro vampBien2(Desviado,50,12);
  Vampiro vampMal1(Caminante,-1,-1);
  Vampiro vampMal2(Desviado,101,-1);

  // mostrar vampiros
  vampBien1.Mostrar(cout);
  vampBien2.Mostrar(cout);
  vampMal1.Mostrar(cout);
  vampMal2.Mostrar(cout);

  // guardar vampiros
  ofstream os1("miVampiro");

  if(os1.is_open()){
    vampBien1.Guardar(os1);
    os1.close();
  }

  // cargar vampiros
  Vampiro vampCargado;
  ifstream is1("miVampiro");

  if(is1.is_open()){
    vampCargado.Cargar(is1);
    is1.close();
  }
  cout << "vampiro cargado: " << endl;
  vampCargado.Mostrar(cout);
  */

  /* TEST FLOR 

  Flor florBien1(1,1,{Atacar,Generar,Explotar});
  Flor florBien2(1,1,{Generar,Explotar});
  Flor florBien3(1,1,{Generar});
  Flor florBien4(1,1,{Atacar});
  Flor florMal1(1,1,{Atacar,Atacar,Generar,Generar});
  Flor florMal2(1,1,{Generar,Generar,Generar,Explotar,Explotar,Explotar,Explotar,Atacar,Atacar,Atacar,Atacar,});

  cout << endl << "flores bien" << endl;
  florBien1.Mostrar(cout);
  florBien2.Mostrar(cout);
  florBien3.Mostrar(cout);
  florBien4.Mostrar(cout);

  cout << endl << "flores mal" << endl;
  florMal1.Mostrar(cout);
  florMal2.Mostrar(cout);

  // guardar flor
  ofstream os("miFlor");

  if(os.is_open()){
    florBien1.Guardar(os);
    os.close();
  }

  //cargar flor
  Flor florCargada;
  ifstream is("miFlor");

  if(is.is_open()){
    florCargada.Cargar(is);
    is.close();
  }
  florCargada.Mostrar(cout);
  */

  /* TEST NIVEL 

  Flor f1(1,1,{Atacar});
  Flor f2(1,1,{Explotar,Generar});
  Flor f3(1,1,{Atacar,Generar,Explotar});

  Vampiro v1(Desviado,15,5);
  Vampiro v2(Caminante,50,2);
  Vampiro v3(Desviado,10,10);

  VampiroEnEspera vamp1(v1,2,3);
  VampiroEnEspera vamp2(v2,1,1);
  VampiroEnEspera vamp3(v3,1,1);
  vector<VampiroEnEspera> spawninglist;
  //spawninglist.push_back(vamp1);
  spawninglist.push_back(vamp2);
  //spawninglist.push_back(vamp3);

  Nivel n1(5,5,10,spawninglist);

  // comprar soles
  //cout << "soles antes: " << n1.solesN() <<  endl;
  n1.comprarSoles(10);
  n1.comprarSoles(30);
  //cout << "soles despues: " << n1.solesN() <<  endl;

  // agregar flor
  Posicion pos1(1,3);
  Posicion pos2(2,2);
  Posicion pos3(3,3);

  n1.agregarFlor(f1,pos1);
  //n1.agregarFlor(f2,pos2);
  //n1.agregarFlor(f3,pos3);  
  
  // obsesivo compulsivo
  //cout << "obsesivo compulsivo: " << n1.obsesivoCompulsivo() << endl;

  // pasar turno
  n1.Mostrar(cout);
  n1.pasarTurno();
  n1.pasarTurno();
  n1.pasarTurno();
  n1.pasarTurno();
  n1.pasarTurno();
  n1.Mostrar(cout);
  n1.pasarTurno();
  n1.pasarTurno();
  n1.pasarTurno();
  n1.pasarTurno();
  n1.Mostrar(cout);
  n1.pasarTurno();
  n1.pasarTurno();
  n1.Mostrar(cout);

  // guardar nivel
  ofstream os("miNivel");

  if(os.is_open()){
    n1.Guardar(os);
    os.close();
  }

  // cargar nivel
  ifstream is("miNivel");
  Nivel nivelCargado;

  if(is.is_open()){
    nivelCargado.Cargar(is);
    is.close();
  }

  cout << "nivel que guardo:" << endl;
  n1.Mostrar(cout);
  cout << endl << endl << "nivel que cargo: " << endl;
  nivelCargado.Mostrar(cout);*/

  /*  TEST JUEGO 

  Flor f1(1,1,{Atacar});
  Flor f2(1,1,{Explotar,Generar});
  Flor f3(1,1,{Atacar,Generar,Explotar});
  std::vector<Flor> vectorFlor;  
  vectorFlor.push_back(f1);
  vectorFlor.push_back(f2);
  vectorFlor.push_back(f3);

  Vampiro v1(Desviado,15,5);
  Vampiro v2(Caminante,50,2);
  Vampiro v3(Desviado,10,10);
  std::vector<Vampiro> vectorVamp;
  vectorVamp.push_back(v1);
  vectorVamp.push_back(v2);
  vectorVamp.push_back(v3);

  Juego game(vectorFlor,vectorVamp);

  VampiroEnEspera vampiroEnEspera1 = VampiroEnEspera(v2, 1, 2);
  VampiroEnEspera vampiroEnEspera2 = VampiroEnEspera(v1, 2, 4);
  std::vector<VampiroEnEspera> spawning;
  spawning.push_back(vampiroEnEspera1);
  Nivel nivel1 = Nivel(10, 10, 50, spawning);
  Nivel nivel2 = Nivel(20, 20, 50, spawning);
  Nivel nivel3 = Nivel(30, 30, 50, spawning);
  Nivel nivel4 = Nivel(40, 40, 50, spawning);

  //agregar nivel
  game.agregarNivel(nivel1,0);
  game.agregarNivel(nivel2,1);
  game.agregarNivel(nivel3,2);
  game.agregarNivel(nivel4,3);
  std::vector<Nivel> vectorNivel;*/

  //pruebo cosas cargando un juego
  //ifstream is("cargarJuego");
  //Juego gameFacil;
  //if(is.is_open()){
  //  gameFacil.Cargar(is);
  //  is.close();
  //}
  //gameFacil.Mostrar(cout);

  //estos salen facil
  /*vectorNivel = gameFacil.estosSaleFacil();
  cout << "vector nivel size: " << vectorNivel.size() << endl;
  int i = 0;
  while(i < vectorNivel.size()){
    vectorNivel[i].Mostrar(cout);
    i++;
  }*/

  //alto cheat
  /*gameFacil.nivelesJ()[0].Mostrar(cout);
  gameFacil.altoCheat(10);
  gameFacil.nivelesJ()[0].Mostrar(cout);*/

  //muy de exactas

  //muy de exactas
  //cout << "muy de exactas: " << gameFacil.muyDeExactas() << endl;
}
